// Code generated by MockGen. DO NOT EDIT.
// Source: client_raw.go
//
// Generated by this command:
//
//	mockgen -package=apdu -destination=client_raw_mock.go -source=client_raw.go
//

// Package apdu is a generated GoMock package.
package apdu

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRawClient is a mock of RawClient interface.
type MockRawClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawClientMockRecorder
}

// MockRawClientMockRecorder is the mock recorder for MockRawClient.
type MockRawClientMockRecorder struct {
	mock *MockRawClient
}

// NewMockRawClient creates a new mock instance.
func NewMockRawClient(ctrl *gomock.Controller) *MockRawClient {
	mock := &MockRawClient{ctrl: ctrl}
	mock.recorder = &MockRawClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawClient) EXPECT() *MockRawClientMockRecorder {
	return m.recorder
}

// SendCommand mocks base method.
func (m *MockRawClient) SendCommand(cmd Command) (Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCommand", cmd)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCommand indicates an expected call of SendCommand.
func (mr *MockRawClientMockRecorder) SendCommand(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommand", reflect.TypeOf((*MockRawClient)(nil).SendCommand), cmd)
}
